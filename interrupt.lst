CCS PCH C Compiler, Version 5.015, 5967               26-Apr-21 04:27

               Filename:   D:\DoAnVDK\Interrupt\interrupt.lst

               ROM used:   528 bytes (2%)
                           Largest free fragment is 32236
               RAM used:   27 (2%) at main() level
                           28 (2%) worst case
               Stack used: 3 locations (2 in main + 1 for interrupts)
               Stack size: 31

*
0000:  GOTO   0180
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  FF2.4
004A:  GOTO   0054
004E:  BTFSC  FF2.1
0050:  GOTO   00BA
0054:  MOVFF  0E,00
0058:  MOVFF  0F,01
005C:  MOVFF  10,02
0060:  MOVFF  11,03
0064:  MOVFF  0C,FE9
0068:  MOVFF  07,FEA
006C:  BSF    07.7
006E:  MOVFF  08,FE1
0072:  MOVFF  09,FE2
0076:  MOVFF  0A,FD9
007A:  MOVFF  0B,FDA
007E:  MOVFF  12,FF3
0082:  MOVFF  13,FF4
0086:  MOVFF  14,FFA
008A:  MOVF   04,W
008C:  MOVFF  06,FE0
0090:  MOVFF  05,FD8
0094:  RETFIE 0
.................... #include <18F4520.h> 
.................... //////////// Standard Header file for the PIC18F4520 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4520 
0096:  MOVFF  FF2,0D
009A:  BCF    FF2.7
009C:  CLRF   FF7
009E:  ADDLW  B0
00A0:  MOVWF  FF6
00A2:  MOVLW  00
00A4:  ADDWFC FF7,F
00A6:  TBLRD*+
00A8:  MOVF   FF5,W
00AA:  BTFSC  0D.7
00AC:  BSF    FF2.7
00AE:  RETURN 0
00B0:  DATA C0,F9
00B2:  DATA A4,B0
00B4:  DATA 99,92
00B6:  DATA 82,F8
00B8:  DATA 80,90
*
00DC:  MOVF   1A,W
00DE:  CLRF   01
00E0:  SUBWF  19,W
00E2:  BC    00EA
00E4:  MOVFF  19,00
00E8:  BRA    0102
00EA:  CLRF   00
00EC:  MOVLW  08
00EE:  MOVWF  1B
00F0:  RLCF   19,F
00F2:  RLCF   00,F
00F4:  MOVF   1A,W
00F6:  SUBWF  00,W
00F8:  BTFSC  FD8.0
00FA:  MOVWF  00
00FC:  RLCF   01,F
00FE:  DECFSZ 1B,F
0100:  BRA    00F0
0102:  RETURN 0
....................  
.................... #list 
....................  
....................  
.................... #fuses NOWDT, HS, PUT, NOPROTECT, NOLVP 
.................... #use delay(crystal=20000000) 
0104:  CLRF   FEA
0106:  MOVLW  19
0108:  MOVWF  FE9
010A:  MOVF   FEF,W
010C:  BZ    0128
010E:  MOVLW  06
0110:  MOVWF  01
0112:  CLRF   00
0114:  DECFSZ 00,F
0116:  BRA    0114
0118:  DECFSZ 01,F
011A:  BRA    0112
011C:  MOVLW  7B
011E:  MOVWF  00
0120:  DECFSZ 00,F
0122:  BRA    0120
0124:  DECFSZ FEF,F
0126:  BRA    010E
0128:  RETURN 0
.................... #byte    portd    =  0xff83 
.................... #byte    portc    =  0xff82 
.................... #byte    porta    =  0xff80 
.................... #bit     sensor   =  porta.4 
....................  
.................... #bit     status   =  portc.6 
....................  
.................... #bit     led_mode =  portc.5 
.................... #bit     led_alarm=  portc.3 
.................... #bit     relay    =  portc.2 
.................... #bit     tens     =  portc.1 
.................... #bit     units    =  portc.0 
....................  
....................  
.................... #bit tmr0on = 0xffd5.7 
.................... const unsigned char number[10]={ 
....................                                  0xc0, 
....................                                  0xf9, 
....................                                  0xa4, 
....................                                  0xb0, 
....................                                  0x99, 
....................                                  0x92, 
....................                                  0x82, 
....................                                  0xf8, 
....................                                  0x80, 
....................                                  0x90 
.................... }; 
....................  
.................... unsigned int8 t0; 
.................... int1 dem=0; 
....................  
.................... #int_ext 
.................... void modeSelection(){ 
....................    dem=~dem; 
*
00BA:  BTG    17.0
00BC:  BCF    FF2.1
00BE:  GOTO   0054
.................... } 
.................... void display(){ 
....................    portd = number[t0%10]; 
*
012A:  MOVFF  16,19
012E:  MOVLW  0A
0130:  MOVWF  1A
0132:  RCALL  00DC
0134:  CLRF   03
0136:  MOVF   00,W
0138:  MOVFF  FF2,19
013C:  BCF    FF2.7
013E:  RCALL  0096
0140:  BTFSC  19.7
0142:  BSF    FF2.7
0144:  MOVWF  F83
....................    units = 1; 
0146:  BSF    F82.0
....................    tens  = 0; 
0148:  BCF    F82.1
....................    delay_ms(1); 
014A:  MOVLW  01
014C:  MOVWF  19
014E:  RCALL  0104
....................     
....................    portd = number[t0/10]; 
0150:  MOVFF  16,19
0154:  MOVLW  0A
0156:  MOVWF  1A
0158:  RCALL  00DC
015A:  CLRF   03
015C:  MOVF   01,W
015E:  MOVFF  FF2,19
0162:  BCF    FF2.7
0164:  RCALL  0096
0166:  BTFSC  19.7
0168:  BSF    FF2.7
016A:  MOVWF  F83
....................    if(portd==number[0]){ 
016C:  MOVF   F83,W
016E:  SUBLW  C0
0170:  BNZ   0174
....................       portd=0xff; 
0172:  SETF   F83
....................    }  
....................    tens  = 1; 
0174:  BSF    F82.1
....................    units = 0; 
0176:  BCF    F82.0
....................    delay_ms(1); 
0178:  MOVLW  01
017A:  MOVWF  19
017C:  RCALL  0104
017E:  RETURN 0
.................... } 
....................  
.................... void checkTimer(){ 
....................    if (t0>80){ 
*
00C2:  MOVF   16,W
00C4:  SUBLW  50
00C6:  BC    00CC
....................       led_alarm = 1; 
00C8:  BSF    F82.3
....................    } 
00CA:  BRA    00CE
....................    else{ 
....................       led_alarm = 0; 
00CC:  BCF    F82.3
....................    } 
....................    if(t0>99){ 
00CE:  MOVF   16,W
00D0:  SUBLW  63
00D2:  BC    00DA
....................       t0 = 0; 
00D4:  CLRF   16
....................       set_timer0(0); 
00D6:  CLRF   FD7
00D8:  CLRF   FD6
....................    } 
00DA:  RETURN 0
.................... } 
....................  
.................... void main(){ 
*
0180:  CLRF   FF8
0182:  BCF    FD0.7
0184:  BSF    07.7
0186:  BCF    17.0
0188:  MOVF   FC1,W
018A:  ANDLW  C0
018C:  IORLW  0F
018E:  MOVWF  FC1
0190:  MOVLW  07
0192:  MOVWF  FB4
....................    set_tris_d(0x00); 
0194:  MOVLW  00
0196:  MOVWF  F95
....................    set_tris_c(0b11000000); 
0198:  MOVLW  C0
019A:  MOVWF  F94
....................    set_tris_a(0xff);   
019C:  MOVLW  FF
019E:  MOVWF  F92
....................    setup_timer_0(T0_EXT_L_TO_H | T0_DIV_1); 
01A0:  MOVLW  A8
01A2:  MOVWF  FD5
....................    set_timer0(0); 
01A4:  CLRF   FD7
01A6:  CLRF   FD6
....................    enable_interrupts(global); 
01A8:  MOVLW  C0
01AA:  IORWF  FF2,F
....................    enable_interrupts(int_ext_L2H); 
01AC:  BSF    FF2.4
01AE:  BSF    FF1.6
....................    while(1){ 
....................       tmr0on = 1; //Cho phep counter hoat dong 
01B0:  BSF    FD5.7
....................       led_mode=0; //Led hien thi che do Auto/Manual 
01B2:  BCF    F82.5
....................       relay = 0; 
01B4:  BCF    F82.2
....................       t0 = get_timer0(); 
01B6:  MOVF   FD6,W
01B8:  MOVWF  16
....................       checkTimer(); 
01BA:  RCALL  00C2
....................       while(sensor==1 & dem==0){ 
01BC:  MOVLW  00
01BE:  BTFSC  F80.4
01C0:  MOVLW  01
01C2:  MOVWF  1A
01C4:  MOVLW  00
01C6:  BTFSS  17.0
01C8:  MOVLW  01
01CA:  ANDWF  1A,W
01CC:  BZ    01D4
....................          relay = 1; 
01CE:  BSF    F82.2
....................          display(); 
01D0:  RCALL  012A
01D2:  BRA    01BC
....................       }   
....................       display(); 
01D4:  RCALL  012A
....................       while(dem==1){ 
01D6:  BTFSS  17.0
01D8:  BRA    0210
....................          tmr0on = 0; //Tam dung counter khi o che do Manual, su dung bien t0 
01DA:  BCF    FD5.7
....................          led_mode = 1; 
01DC:  BSF    F82.5
....................          display(); 
01DE:  RCALL  012A
....................          if(status==1){ 
01E0:  BTFSS  F82.6
01E2:  BRA    0208
....................             for (int8 i=0; i<=10;i++){display();} 
01E4:  CLRF   18
01E6:  MOVF   18,W
01E8:  SUBLW  0A
01EA:  BNC   01F2
01EC:  RCALL  012A
01EE:  INCF   18,F
01F0:  BRA    01E6
....................             if(status==1){ 
01F2:  BTFSS  F82.6
01F4:  BRA    0208
....................                relay = ~relay; 
01F6:  BTG    F82.2
....................                if(relay){ 
01F8:  BTFSS  F82.2
01FA:  BRA    0200
....................                   t0++; 
01FC:  INCF   16,F
....................                   checkTimer(); 
01FE:  RCALL  00C2
....................                    
....................                } 
....................                while(status==1){ 
0200:  BTFSS  F82.6
0202:  BRA    0208
....................                   display(); 
0204:  RCALL  012A
0206:  BRA    0200
....................                } 
....................                } 
....................          }     
....................           set_timer0(t0); //Set lai gia tri timer sau khi thoat khoi che do Manual 
0208:  CLRF   FD7
020A:  MOVFF  16,FD6
020E:  BRA    01D6
....................          } 
0210:  BRA    01B0
....................          
....................       } 
....................    }  
....................  
0212:  SLEEP 

Configuration Fuses:
   Word  1: C200   HS FCMEN IESO
   Word  2: 1E1E   PUT BROWNOUT BORV21 NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 0081   STVREN NOLVP NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
